# Generated by Django 2.2.2 on 2019-06-11 13:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('rbac', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=32, verbose_name='姓名')),
                ('phone', models.CharField(max_length=32, verbose_name='手机号')),
                ('age', models.CharField(max_length=32, verbose_name='年龄')),
                ('gender', models.IntegerField(choices=[(1, '男'), (2, '女')], default=1, verbose_name='性别')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester', models.IntegerField(verbose_name='班级(期)')),
                ('price', models.IntegerField(verbose_name='学费')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='开班日期')),
                ('graduate_date', models.DateField(blank=True, null=True, verbose_name='结业日期')),
                ('memo', models.CharField(blank=True, max_length=255, null=True, verbose_name='说明')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='课程')),
            ],
        ),
        migrations.CreateModel(
            name='CourseRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_num', models.IntegerField(verbose_name='节次')),
                ('date', models.DateField(auto_now_add=True, verbose_name='上课日期')),
                ('class_object', models.ForeignKey(on_delete=False, to='web.ClassList', verbose_name='班级')),
                ('teacher', models.ForeignKey(on_delete=False, to=settings.AUTH_USER_MODEL, verbose_name='讲师')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='客户姓名')),
                ('qq', models.CharField(help_text='QQ/微信/手机号', max_length=64, unique=True, verbose_name='联系方式')),
                ('status', models.IntegerField(choices=[(1, '已报名'), (2, '未报名')], default=2, verbose_name='客户状态')),
                ('gender', models.IntegerField(choices=[(1, '男'), (2, '女')], verbose_name='性别')),
                ('source', models.IntegerField(choices=[(1, 'QQ群'), (2, '内部转介绍'), (3, '官方网站'), (4, '百度推广'), (5, '360推广'), (6, '搜狗推广'), (7, '腾旭课堂'), (8, '广点通'), (9, '高校宣讲'), (10, '渠道代理'), (11, '5lcto'), (12, '智汇推'), (13, '网流'), (14, 'DSP'), (15, 'SEO'), (16, '其他')], default=1, verbose_name='客户来源')),
                ('education', models.IntegerField(blank=True, choices=[(1, '重点大学'), (2, '普通本科'), (3, '独立院校'), (4, '民办本科'), (5, '大专'), (6, '民办专科'), (7, '高中'), (8, '其他')], null=True, verbose_name='客户学历')),
                ('graduation_school', models.CharField(blank=True, max_length=64, null=True, verbose_name='毕业院校')),
                ('major', models.CharField(blank=True, max_length=64, null=True, verbose_name='所学专业')),
                ('experience', models.IntegerField(blank=True, choices=[(1, '在校生'), (2, '应届毕业'), (3, '半年以内'), (4, '半年至一年'), (5, '一年至三年'), (6, '三年至五年'), (7, '五年以上')], null=True, verbose_name='工作经验')),
                ('work_status', models.IntegerField(blank=True, choices=[(1, '在职'), (2, '无业')], null=True, verbose_name='职业状态')),
                ('company', models.CharField(blank=True, max_length=64, null=True, verbose_name='目前就职公司')),
                ('date', models.DateField(auto_now_add=True, verbose_name='咨询日期')),
                ('last_consult_date', models.DateField(auto_now_add=True, verbose_name='最后跟进日期')),
                ('consultant', models.ForeignKey(blank=True, limit_choices_to={'depart__title': '销售部'}, null=True, on_delete=False, related_name='consultant', to=settings.AUTH_USER_MODEL, verbose_name='课程顾问')),
                ('course', models.ManyToManyField(to='web.Course', verbose_name='咨询课程')),
                ('referral_from', models.ForeignKey(blank=True, help_text='若此客户是转介绍学员，请在此处选择内部学员姓名', null=True, on_delete=False, related_name='internal_referral', to='web.Customer', verbose_name='转介绍信息')),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='部门')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, verbose_name='校区')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qq', models.CharField(max_length=32, verbose_name='QQ号')),
                ('mobile', models.CharField(max_length=32, verbose_name='手机号')),
                ('emergency_contract', models.CharField(max_length=32, verbose_name='紧急联系人')),
                ('score', models.IntegerField(default=100, verbose_name='学分')),
                ('student_status', models.IntegerField(choices=[(1, '申请中'), (2, '在读'), (3, '毕业'), (4, '退学')], default=1, verbose_name='学员状态')),
                ('memo', models.CharField(blank=True, max_length=255, null=True, verbose_name='备注')),
                ('class_list', models.ManyToManyField(blank=True, to='web.ClassList', verbose_name='已报班级')),
                ('customer', models.OneToOneField(on_delete=False, to='web.Customer', verbose_name='客户姓名')),
            ],
        ),
        migrations.CreateModel(
            name='StudyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record', models.IntegerField(choices=[(1, '已签到'), (2, '请假'), (3, '迟到'), (4, '缺勤'), (5, '早退')], default=1, verbose_name='上课记录')),
                ('course_record', models.ForeignKey(on_delete=False, to='web.CourseRecord', verbose_name='出勤课程')),
                ('student', models.ForeignKey(on_delete=False, to='web.Student', verbose_name='学员')),
            ],
        ),
        migrations.CreateModel(
            name='ScoreRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='扣分理由')),
                ('score', models.IntegerField(help_text='违纪扣分写负值，表现良好写正值', verbose_name='分值')),
                ('student', models.ForeignKey(on_delete=False, to='web.Student', verbose_name='学生')),
                ('user', models.ForeignKey(on_delete=False, to=settings.AUTH_USER_MODEL, verbose_name='执行人')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pay_type', models.IntegerField(choices=[(1, '报名费'), (2, '学费'), (3, '退费'), (4, '其他')], default=1, verbose_name='费用类型')),
                ('paid_fee', models.IntegerField(default=0, verbose_name='金额')),
                ('apply_date', models.DateField(auto_now_add=True, verbose_name='申请日期')),
                ('confirm_status', models.IntegerField(choices=[(1, '申请中'), (2, '已确认'), (3, '已驳回')], default=1, verbose_name='确认状态')),
                ('confirm_date', models.DateField(blank=True, null=True, verbose_name='确认日期')),
                ('note', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('class_list', models.ForeignKey(on_delete=False, to='web.ClassList', verbose_name='申请班级')),
                ('confirm_user', models.ForeignKey(blank=True, null=True, on_delete=False, related_name='confirms', to=settings.AUTH_USER_MODEL, verbose_name='审批人')),
                ('consultant', models.ForeignKey(help_text='谁签单就选谁', on_delete=False, to=settings.AUTH_USER_MODEL, verbose_name='课程顾问')),
                ('customer', models.ForeignKey(on_delete=False, to='web.Customer', verbose_name='客户')),
            ],
        ),
        migrations.CreateModel(
            name='ConsultRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, verbose_name='跟进日期')),
                ('note', models.TextField(verbose_name='跟进内容')),
                ('consultant', models.ForeignKey(limit_choices_to={'depart__title': '销售部'}, on_delete=False, to=settings.AUTH_USER_MODEL, verbose_name='跟踪人')),
                ('customer', models.ForeignKey(on_delete=False, to='web.Customer', verbose_name='客户')),
            ],
        ),
        migrations.AddField(
            model_name='classlist',
            name='course',
            field=models.ForeignKey(on_delete=False, to='web.Course', verbose_name='课程名称'),
        ),
        migrations.AddField(
            model_name='classlist',
            name='school',
            field=models.ForeignKey(on_delete=False, to='web.School', verbose_name='校区'),
        ),
        migrations.AddField(
            model_name='classlist',
            name='teacher',
            field=models.ManyToManyField(limit_choices_to={'depart__title__in': ['python教学部', 'Linux教学部', 'java教学部', '大数据教学部']}, related_name='teach_class', to=settings.AUTH_USER_MODEL, verbose_name='任课老师'),
        ),
        migrations.AddField(
            model_name='classlist',
            name='tutor',
            field=models.ForeignKey(limit_choices_to={'depart__title': '教务部'}, on_delete=False, related_name='classes', to=settings.AUTH_USER_MODEL, verbose_name='班主任'),
        ),
        migrations.AddField(
            model_name='staff',
            name='depart',
            field=models.ForeignKey(on_delete=False, to='web.Department', verbose_name='部门'),
        ),
        migrations.AddField(
            model_name='staff',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='staff',
            name='role',
            field=models.ManyToManyField(blank=True, to='rbac.Role', verbose_name='用户的角色'),
        ),
        migrations.AddField(
            model_name='staff',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
