Stark组件使用文档
- 复制stark组件包
- 在新建项目中写入model表
- 在新建项目中创建一个stark.py的文件
    - 文件头进行引入
        from stark.service.start_assembly import site
        from stark.service.start_assembly import StarkHandler
    - 为新表创建一个Handler类，具体可以参考stark_demo文件，然后为表配置各种功能
    - 对新项目中的表进行注册
        site.register(表名, CustomerHandler, prev=None)           # prev可用于在URL里面加一个前缀
- 定制数据表中需要展示的字段
    - list_display = []
        - 普通字段用字符串格式
        - choices字段
            StarkHandler.get_choice_text("字段中文名", "字段英文名"),
        - 在每条数据前面加个选框
            StarkHandler.display_checkbox
- 设置组合搜索的字段
    - search_group = [
        - SearchOption(
            "字段",
            is_multi=True                       # is_choices设置该字段是否支持多选
            db_condition={"id__gt": 5}          # db_condition设置带条件(例:要求ID大于5)的去获取进行组合搜索字段的数据
        ),
    ]
- 在列表中多加一列操作(例：为用户表新增一个重置密码的功能)
    - 为新的列新增操作按钮
            from django.utils.safestring import mark_safe
            def display_reset(self, obj=None, is_header=None):
                """为员工表多加一列，用于重置密码"""
                if is_header:
                    return "重置密码"
                # 这里进行别名拼接，用url的别名和路由分发的名称空间这两个值进行拼接
                # 这里进行拼接的namespace来自于StarkSite中的namespace属性
                reset_name = "%s:%s" % (self.site.namespace, self.get_reset_url_name)  # 修改按钮的别名
                reset_url = StarkHandler.memory_url(self.request, reset_name, *[obj.pk])
                # 这里放了编辑和修改两个按钮
                button = mark_safe("""<a style="font-size: 16px;" href="{0}"><i class="fa fa-gears" aria-hidden="true"></i></a>""".format(reset_url))
                return button
    - 为新的URL创建新的URL别名
            @property
            def get_reset_url_name(self):
                """获取重置密码的路由别名"""
                return self.get_url_name("reset")
    - 把新的操作的URL加入到项目中
            from django.conf.urls import url
            def extra_urls(self):
                patterns = [
                    url("^reset/(?P<pk>\d+)/$", self.wapper(self.reset_view), name=self.get_reset_url_name),
                ]
                return patterns
    - 在Handler中先自定义一个视图函数
            def reset_view(self, request, pk, *args, **kwargs):
                    """重置密码操作"""
                    current_obj = self.model_class.objects.filter(id=pk).first()  # 获取当前要重置密码的用户对象
                    if not current_obj:
                        return render(request, "rbac/refuse.html")
                    if request.method == "GET":
                        form = ResetPWDModelForm()     # 把这个角色对象传入form组件里面，页面点开后的input输入框内会自带上这个对象的各种值
                        return render(request, "stark/change.html", {"form": form})
                    form = ResetPWDModelForm(instance=current_obj, data=request.POST)
                    if form.is_valid():             # 如果数据合法，就进行保存
                        self.save(form, is_update=False)
                        name = "%s:%s" % (self.site.namespace, self.get_list_url_name)
                        return redirect(StarkHandler.memory_reverse(self.request, name))  # 跳转会列表页面
                    return render(request, 'stark/change.html', {'form': form})
    - 把需要添加的操作放入list_display列表中
            list_display = [
                display_reset,
            ]
- 对当前表设置关键字搜索
    - 配置search_list
        search_list = ["name__contains", "username__contains"]  # 为当前表配置搜索的字段，_contains表示或的意思
